{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from \"@angular/forms\";\nimport { MessageService } from \"primeng/api\";\nlet LoginComponent = class LoginComponent {\n  constructor(fb, authService, router, messageService) {\n    this.fb = fb;\n    this.authService = authService;\n    this.router = router;\n    this.messageService = messageService;\n    this.showPassword = false;\n    this.loginForm = this.fb.group({\n      userName: ['', [Validators.required, Validators.minLength(8), Validators.maxLength(20), Validators.pattern(/^(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]*$/)]],\n      password: ['', [Validators.required, Validators.minLength(8), Validators.pattern(/^(?=.*[A-Z])(?=.*[!@#$&*])[^\\s]*$/)]]\n    });\n  }\n  // Cambia la visibilidad de la contraseña\n  togglePasswordVisibility() {\n    this.showPassword = !this.showPassword;\n  }\n  // Función que maneja el inicio de sesión\n  onLogin() {\n    if (this.loginForm.valid) {\n      this.authService.login(this.loginForm.value.userName, this.loginForm.value.password).subscribe({\n        next: response => {\n          // Si se recibe una respuesta con el campo idUsuario\n          if (response.body && response.body.idUsuario) {\n            // Almacenar el idUsuario en el localStorage\n            localStorage.setItem('idUsuario', response.body.idUsuario.toString());\n            // Redirigir al usuario al dashboard\n            this.router.navigate(['/dashboard']);\n          } else {\n            console.error('User details not found', response);\n            this.messageService.add({\n              severity: 'error',\n              summary: 'Problemas en el inicio de sesión',\n              detail: 'No se encontraron los detalles del usuario en la respuesta'\n            });\n          }\n        },\n        error: error => {\n          console.error('Error during login', error);\n          this.messageService.add({\n            severity: 'error',\n            summary: 'Problemas en el inicio de sesión',\n            detail: error.message || 'Error desconocido durante el inicio de sesión'\n          });\n        }\n      });\n    } else {\n      console.error('Form is not valid', this.loginForm.errors);\n      this.messageService.add({\n        severity: 'warn',\n        summary: '¡Tenemos un problema!',\n        detail: 'Formulario inválido: ' + JSON.stringify(this.loginForm.errors)\n      });\n    }\n  }\n  // Redirige al usuario a la página de recuperación de contraseña\n  onForgotPassword() {\n    this.router.navigate(['/recover-password']).then(() => {\n      console.log('Redireccionado a la página de recuperación de contraseña');\n      this.messageService.add({\n        severity: 'info',\n        summary: '¡Todo está bien!',\n        detail: 'Redireccionado a la página de recuperación de contraseña'\n      });\n    }).catch(err => {\n      console.error('Error al redirigir a la página de recuperación de contraseña', err);\n      this.messageService.add({\n        severity: 'warn',\n        summary: '¡Tenemos un problema!',\n        detail: 'Error al redirigir a la página de recuperación de contraseña'\n      });\n    });\n  }\n};\nLoginComponent = __decorate([Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss'],\n  providers: [MessageService]\n})], LoginComponent);\nexport { LoginComponent };","map":{"version":3,"mappings":"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","names":["Component","Validators","MessageService","LoginComponent","constructor","fb","authService","router","messageService","loginForm","group","userName","required","minLength","maxLength","pattern","password","togglePasswordVisibility","showPassword","onLogin","valid","login","value","subscribe","next","response","body","idUsuario","localStorage","setItem","toString","navigate","console","error","add","severity","summary","detail","message","errors","JSON","stringify","onForgotPassword","then","log","catch","err","selector","templateUrl","styleUrls","providers"],"sourceRoot":"","sources":["C:\\Users\\desta\\Downloads\\FrontEnd\\src\\app\\service\\auth\\auth.service.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from \"@angular/forms\";\nimport { AuthService } from \"../../service/auth/auth.service\";\nimport { Router } from \"@angular/router\";\nimport { MessageService } from \"primeng/api\";\nimport { HttpResponse } from \"@angular/common/http\";\n\n@Component({\n    selector: 'app-login',\n    templateUrl: './login.component.html',\n    styleUrls: ['./login.component.scss'],\n    providers: [MessageService]\n})\nexport class LoginComponent {\n    loginForm: FormGroup;\n    showPassword = false;\n\n    constructor(\n        private fb: FormBuilder,\n        private authService: AuthService,\n        private router: Router,\n        public messageService: MessageService\n    ) {\n        this.loginForm = this.fb.group({\n            userName: ['', [Validators.required, Validators.minLength(8), Validators.maxLength(20), Validators.pattern(/^(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]*$/)]],\n            password: ['', [Validators.required, Validators.minLength(8), Validators.pattern(/^(?=.*[A-Z])(?=.*[!@#$&*])[^\\s]*$/)]]\n        });\n    }\n\n    // Cambia la visibilidad de la contraseña\n    togglePasswordVisibility(): void {\n        this.showPassword = !this.showPassword;\n    }\n\n    // Función que maneja el inicio de sesión\n    onLogin(): void {\n        if (this.loginForm.valid) {\n            this.authService.login(this.loginForm.value.userName, this.loginForm.value.password)\n                .subscribe({\n                    next: (response: HttpResponse<any>) => {\n                        // Si se recibe una respuesta con el campo idUsuario\n                        if (response.body && response.body.idUsuario) {\n                            // Almacenar el idUsuario en el localStorage\n                            localStorage.setItem('idUsuario', response.body.idUsuario.toString());\n                            // Redirigir al usuario al dashboard\n                            this.router.navigate(['/dashboard']);\n                        } else {\n                            console.error('User details not found', response);\n                            this.messageService.add({\n                                severity: 'error',\n                                summary: 'Problemas en el inicio de sesión',\n                                detail: 'No se encontraron los detalles del usuario en la respuesta'\n                            });\n                        }\n                    },\n                    error: (error: any) => {\n                        console.error('Error during login', error);\n                        this.messageService.add({\n                            severity: 'error',\n                            summary: 'Problemas en el inicio de sesión',\n                            detail: error.message || 'Error desconocido durante el inicio de sesión'\n                        });\n                    }\n                });\n        } else {\n            console.error('Form is not valid', this.loginForm.errors);\n            this.messageService.add({\n                severity: 'warn',\n                summary: '¡Tenemos un problema!',\n                detail: 'Formulario inválido: ' + JSON.stringify(this.loginForm.errors)\n            });\n        }\n    }\n\n    // Redirige al usuario a la página de recuperación de contraseña\n    onForgotPassword(): void {\n        this.router.navigate(['/recover-password'])\n            .then(() => {\n                console.log('Redireccionado a la página de recuperación de contraseña');\n                this.messageService.add({\n                    severity: 'info',\n                    summary: '¡Todo está bien!',\n                    detail: 'Redireccionado a la página de recuperación de contraseña'\n                });\n            })\n            .catch(err => {\n                console.error('Error al redirigir a la página de recuperación de contraseña', err);\n                this.messageService.add({\n                    severity: 'warn',\n                    summary: '¡Tenemos un problema!',\n                    detail: 'Error al redirigir a la página de recuperación de contraseña'\n                });\n            });\n    }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}