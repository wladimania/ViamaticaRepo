{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport { Global } from \"../../utils/Global\";\nimport { environment } from \"../../../environments/environment\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class AuthService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.loginUrl = `${environment.apiBaseUrl}/session/login`;\n    this.logoutUrl = `${environment.apiBaseUrl}/session/logout`;\n    this.recoverPasswordUrl = `${environment.apiBaseUrl}/session/cambiarContrasena`;\n  }\n  cambiarContrasena(email, nuevaContrasena) {\n    const body = {\n      mail: email,\n      nuevaContrasena\n    };\n    return this.http.post(this.recoverPasswordUrl, body).pipe(catchError(this.handleError));\n  }\n  login(userName, password) {\n    return this.http.post(this.loginUrl, {\n      userName,\n      password\n    }, {\n      observe: 'response'\n    }).pipe(tap(response => {\n      if (response.status === 200 && response.body) {\n        // localStorage.setItem('idUsuario', response.body.idUsuario.toString());\n        // localStorage.setItem('userDetails', JSON.stringify(response.body));\n        this.setDataUser(response.body);\n        this.router.navigate(['/dashboard']);\n      }\n    }), catchError(this.handleError));\n  }\n  logout(idUsuario) {\n    if (idUsuario === null) {\n      console.error('User ID is null, cannot logout');\n      this.router.navigate(['/login']);\n      return throwError('User ID is null, cannot logout');\n    }\n    return this.http.post(this.logoutUrl, {\n      idUsuario\n    }).pipe(tap(() => {\n      localStorage.removeItem('idUsuario');\n      this.router.navigate(['/login']);\n    }), catchError(this.handleError));\n  }\n  handleError(error) {\n    return throwError(error);\n  }\n  /* METODOS DE PERSISTENCIA DE SESION */\n  setDataUser(data) {\n    // Quitar sesión remanente en caso de existir\n    if (this.sessionExists()) {\n      this.removeAccount();\n    }\n    localStorage.setItem(environment.userKey, JSON.stringify(data));\n  }\n  getDataUser() {\n    if (this.sessionExists()) {\n      const objS = localStorage.getItem(environment.userKey);\n      if (objS !== null && !Global.isNullOrUndefined(objS)) {\n        return JSON.parse(objS);\n      }\n    }\n    return null;\n  }\n  sessionExists() {\n    return localStorage.getItem(environment.userKey) !== null;\n  }\n  removeAccount() {\n    localStorage.removeItem(environment.userKey);\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["throwError","catchError","tap","Global","environment","AuthService","constructor","http","router","apiBaseUrl","cambiarContrasena","email","nuevaContrasena","body","mail","post","recoverPasswordUrl","pipe","handleError","login","userName","password","loginUrl","observe","response","status","setDataUser","navigate","logout","idUsuario","console","error","logoutUrl","localStorage","removeItem","data","sessionExists","removeAccount","setItem","userKey","JSON","stringify","getDataUser","objS","getItem","isNullOrUndefined","parse","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\desta\\Downloads\\FrontEnd\\src\\app\\service\\auth\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {HttpClient, HttpParams, HttpResponse} from '@angular/common/http';\nimport { Router } from '@angular/router';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport {Global} from \"../../utils/Global\";\nimport {environment} from \"../../../environments/environment\";\nimport {User} from \"../../models/user.model\";\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private loginUrl = `${environment.apiBaseUrl}/session/login`;\n  private logoutUrl = `${environment.apiBaseUrl}/session/logout`;\n  private recoverPasswordUrl = `${environment.apiBaseUrl}/session/cambiarContrasena`;\n\n  constructor(private http: HttpClient, private router: Router) {}\n\n  cambiarContrasena(email: string, nuevaContrasena: string): Observable<any> {\n    const body = { mail: email, nuevaContrasena };\n    return this.http.post(this.recoverPasswordUrl, body).pipe(\n      catchError(this.handleError)\n    );\n  }\n  login(userName: string, password: string): Observable<HttpResponse<User>> {\n    return this.http.post<User>(this.loginUrl, { userName, password }, { observe: 'response' }).pipe(\n      tap(response => {\n        if (response.status === 200 && response.body) {\n          // localStorage.setItem('idUsuario', response.body.idUsuario.toString());\n          // localStorage.setItem('userDetails', JSON.stringify(response.body));\n          this.setDataUser(response.body);\n          this.router.navigate(['/dashboard']);\n        }\n      }),\n      catchError(this.handleError)\n    );\n  }\n\n  logout(idUsuario: number | null): Observable<any> {\n    if (idUsuario === null) {\n      console.error('User ID is null, cannot logout');\n      this.router.navigate(['/login']);\n      return throwError('User ID is null, cannot logout');\n    }\n    return this.http.post(this.logoutUrl, { idUsuario }).pipe(\n      tap(() => {\n        localStorage.removeItem('idUsuario');\n        this.router.navigate(['/login']);\n      }),\n      catchError(this.handleError)\n    );\n  }\n\n  private handleError(error: any) {\n    return throwError(error);\n  }\n\n  /* METODOS DE PERSISTENCIA DE SESION */\n    public setDataUser(data: User): void {\n        // Quitar sesión remanente en caso de existir\n        if(this.sessionExists()) {\n            this.removeAccount();\n        }\n        localStorage.setItem(environment.userKey, JSON.stringify(data));\n    }\n\n    public getDataUser(): User | null {\n        if(this.sessionExists()) {\n            const objS = localStorage.getItem(environment.userKey);\n            if (objS !== null && !Global.isNullOrUndefined(objS)) {\n                return (JSON.parse(objS) as User);\n            }\n        }\n        return null;\n    }\n\n    public sessionExists(): boolean {\n        return localStorage.getItem(environment.userKey) !== null;\n    }\n\n    public removeAccount(): void {\n        localStorage.removeItem(environment.userKey);\n    }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}