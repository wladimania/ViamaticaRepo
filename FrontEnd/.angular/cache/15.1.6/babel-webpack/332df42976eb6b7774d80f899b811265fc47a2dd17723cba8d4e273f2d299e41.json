{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"../service/auth/auth.service\";\nexport class GlobalGuardsGuard {\n  constructor(router, accountService) {\n    this.router = router;\n    this.accountService = accountService;\n  }\n  canActivate(route, state) {\n    if (this.accountService.sessionExists()) {\n      const storagedData = this.accountService.getDataUser();\n      const user = storagedData[0];\n      // Aquí puedes agregar la lógica de validación de accesos\n      if (this.validateAccess(user)) {\n        return true;\n      } else {\n        // Redirigir al usuario a una página de acceso no autorizado\n        return this.router.parseUrl('/unauthorized');\n      }\n    } else {\n      // Redirigir al usuario a la página de inicio de sesión\n      return this.router.parseUrl('/login');\n    }\n  }\n  validateAccess(user) {\n    return !!user.rolUsuariosByIdUsuario.rolByRolIdRol.rolName && user.rolUsuariosByIdUsuario.rolByRolIdRol.rolName.includes('admin');\n  }\n}\nGlobalGuardsGuard.ɵfac = function GlobalGuardsGuard_Factory(t) {\n  return new (t || GlobalGuardsGuard)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.AuthService));\n};\nGlobalGuardsGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: GlobalGuardsGuard,\n  factory: GlobalGuardsGuard.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;;AAUA,OAAM,MAAOA,iBAAiB;EAC1BC,YAAoBC,MAAc,EACdC,cAA2B;IAD3B,WAAM,GAAND,MAAM;IACN,mBAAc,GAAdC,cAAc;EAClC;EACAC,WAAW,CACPC,KAA6B,EAC7BC,KAA0B;IAE1B,IAAI,IAAI,CAACH,cAAc,CAACI,aAAa,EAAE,EAAE;MACrC,MAAMC,YAAY,GAA0B,IAAI,CAACL,cAAc,CAACM,WAAW,EAAG;MAC9E,MAAMC,IAAI,GAAgBF,YAAY,CAAC,CAAC,CAAC;MACzC;MACA,IAAI,IAAI,CAACG,cAAc,CAACD,IAAI,CAAC,EAAE;QAC3B,OAAO,IAAI;OACd,MAAM;QACH;QACA,OAAO,IAAI,CAACR,MAAM,CAACU,QAAQ,CAAC,eAAe,CAAC;;KAEnD,MAAM;MACH;MACA,OAAO,IAAI,CAACV,MAAM,CAACU,QAAQ,CAAC,QAAQ,CAAC;;EAE7C;EACQD,cAAc,CAACD,IAAiB;IACpC,OAAO,CAAC,CAACA,IAAI,CAACG,sBAAsB,CAACC,aAAa,CAACC,OAAO,IAAIL,IAAI,CAACG,sBAAsB,CAACC,aAAa,CAACC,OAAO,CAACC,QAAQ,CAAC,OAAO,CAAC;EACrI;;;mBAzBShB,iBAAiB;AAAA;;SAAjBA,iBAAiB;EAAAiB,SAAjBjB,iBAAiB;EAAAkB,YAFd;AAAM","names":["GlobalGuardsGuard","constructor","router","accountService","canActivate","route","state","sessionExists","storagedData","getDataUser","user","validateAccess","parseUrl","rolUsuariosByIdUsuario","rolByRolIdRol","rolName","includes","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\desta\\Downloads\\FrontEnd\\src\\app\\guards\\global-guards.guard.ts"],"sourcesContent":["import {Injectable} from '@angular/core';\r\nimport {ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot, UrlTree} from '@angular/router';\r\nimport {Observable} from 'rxjs';\r\nimport {Global} from \"../utils/Global\";\r\nimport {AuthService} from \"../service/auth/auth.service\";\r\nimport {User} from \"../models/user.model\";\r\nimport {UserDetails} from \"../models/user-details.model\";\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class GlobalGuardsGuard implements CanActivate {\r\n    constructor(private router: Router,\r\n                private accountService: AuthService) {\r\n    }\r\n    canActivate(\r\n        route: ActivatedRouteSnapshot,\r\n        state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\r\n\r\n        if (this.accountService.sessionExists()) {\r\n            const storagedData: [UserDetails, number] = this.accountService.getDataUser()!;\r\n            const user: UserDetails = storagedData[0];\r\n            // Aquí puedes agregar la lógica de validación de accesos\r\n            if (this.validateAccess(user)) {\r\n                return true;\r\n            } else {\r\n                // Redirigir al usuario a una página de acceso no autorizado\r\n                return this.router.parseUrl('/unauthorized');\r\n            }\r\n        } else {\r\n            // Redirigir al usuario a la página de inicio de sesión\r\n            return this.router.parseUrl('/login');\r\n        }\r\n    }\r\n    private validateAccess(user: UserDetails): boolean {\r\n        return !!user.rolUsuariosByIdUsuario.rolByRolIdRol.rolName && user.rolUsuariosByIdUsuario.rolByRolIdRol.rolName.includes('admin');\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}