{"ast":null,"code":"import { Subject } from 'rxjs';\nimport { throwError } from 'rxjs';\nimport { environment } from \"../../environments/environment\";\nimport { catchError, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class MenuService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.usuariosUrl = `${environment.apiBaseUrl}/usuarios/admin/usuarios`;\n    this.logoutUrl = `${environment.apiBaseUrl}/session/logout`;\n    this.menuSource = new Subject();\n    this.resetSource = new Subject();\n    this.menuSource$ = this.menuSource.asObservable();\n    this.resetSource$ = this.resetSource.asObservable();\n  }\n  onMenuStateChange(event) {\n    this.menuSource.next(event);\n  }\n  reset() {\n    this.resetSource.next(true);\n  }\n  logout(idUsuario) {\n    if (idUsuario === null) {\n      console.error('User ID is null, cannot logout');\n      this.router.navigate(['/login']);\n      return throwError('User ID is null, cannot logout');\n    }\n    return this.http.post(this.logoutUrl, {\n      idUsuario\n    }).pipe(tap(() => {\n      localStorage.removeItem('idUsuario');\n      this.router.navigate(['/login']);\n    }), catchError(this.handleError));\n  }\n  getUsuariosList(idUsuario) {\n    const url = `${this.usuariosUrl}/${idUsuario}`;\n    return this.http.post(url, {});\n  }\n  handleError(error) {\n    let errorMessage = 'Unknown error occurred!';\n    if (error.error instanceof ErrorEvent) {\n      // A client-side or network error occurred.\n      console.error('An error occurred:', error.error.message);\n      errorMessage = `Client-side error: ${error.error.message}`;\n    } else {\n      // The backend returned an unsuccessful response code.\n      console.error(`Backend returned code ${error.status}, body was: `, error.error);\n      errorMessage = `Server-side error: ${error.status} ${error.error.message}`;\n    }\n    // Return an observable with a user-facing error message.\n    return throwError(() => new Error(errorMessage));\n  }\n}\nMenuService.ɵfac = function MenuService_Factory(t) {\n  return new (t || MenuService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n};\nMenuService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: MenuService,\n  factory: MenuService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAASA,OAAO,QAAQ,MAAM;AAE9B,SAAqBC,UAAU,QAAQ,MAAM;AAG7C,SAAQC,WAAW,QAAO,gCAAgC;AAC1D,SAASC,UAAU,EAAEC,GAAG,QAAQ,gBAAgB;;;;AAMhD,OAAM,MAAOC,WAAW;EAKpBC,YAAoBC,IAAgB,EAAUC,MAAc;IAAxC,SAAI,GAAJD,IAAI;IAAsB,WAAM,GAANC,MAAM;IAJ5C,gBAAW,GAAG,GAAGN,WAAW,CAACO,UAAU,0BAA0B;IACjE,cAAS,GAAG,GAAGP,WAAW,CAACO,UAAU,iBAAiB;IACtD,eAAU,GAAG,IAAIT,OAAO,EAAmB;IAC3C,gBAAW,GAAG,IAAIA,OAAO,EAAE;IAEnC,gBAAW,GAAG,IAAI,CAACU,UAAU,CAACC,YAAY,EAAE;IAC5C,iBAAY,GAAG,IAAI,CAACC,WAAW,CAACD,YAAY,EAAE;EAFiB;EAI/DE,iBAAiB,CAACC,KAAsB;IACpC,IAAI,CAACJ,UAAU,CAACK,IAAI,CAACD,KAAK,CAAC;EAC/B;EAEAE,KAAK;IACD,IAAI,CAACJ,WAAW,CAACG,IAAI,CAAC,IAAI,CAAC;EAC/B;EACAE,MAAM,CAACC,SAAwB;IAC3B,IAAIA,SAAS,KAAK,IAAI,EAAE;MACpBC,OAAO,CAACC,KAAK,CAAC,gCAAgC,CAAC;MAC/C,IAAI,CAACZ,MAAM,CAACa,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;MAChC,OAAOpB,UAAU,CAAC,gCAAgC,CAAC;;IAEvD,OAAO,IAAI,CAACM,IAAI,CAACe,IAAI,CAAC,IAAI,CAACC,SAAS,EAAE;MAAEL;IAAS,CAAE,CAAC,CAACM,IAAI,CACrDpB,GAAG,CAAC,MAAK;MACLqB,YAAY,CAACC,UAAU,CAAC,WAAW,CAAC;MACpC,IAAI,CAAClB,MAAM,CAACa,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;IACpC,CAAC,CAAC,EACFlB,UAAU,CAAC,IAAI,CAACwB,WAAW,CAAC,CAC/B;EACL;EACAC,eAAe,CAACV,SAAiB;IAC7B,MAAMW,GAAG,GAAG,GAAG,IAAI,CAACC,WAAW,IAAIZ,SAAS,EAAE;IAC9C,OAAO,IAAI,CAACX,IAAI,CAACe,IAAI,CAAgBO,GAAG,EAAC,EAAE,CAAC;EAChD;EACQF,WAAW,CAACP,KAAwB;IACxC,IAAIW,YAAY,GAAG,yBAAyB;IAC5C,IAAIX,KAAK,CAACA,KAAK,YAAYY,UAAU,EAAE;MACnC;MACAb,OAAO,CAACC,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAACA,KAAK,CAACa,OAAO,CAAC;MACxDF,YAAY,GAAG,sBAAsBX,KAAK,CAACA,KAAK,CAACa,OAAO,EAAE;KAC7D,MAAM;MACH;MACAd,OAAO,CAACC,KAAK,CAAC,yBAAyBA,KAAK,CAACc,MAAM,cAAc,EAAEd,KAAK,CAACA,KAAK,CAAC;MAC/EW,YAAY,GAAG,sBAAsBX,KAAK,CAACc,MAAM,IAAId,KAAK,CAACA,KAAK,CAACa,OAAO,EAAE;;IAE9E;IACA,OAAOhC,UAAU,CAAC,MAAM,IAAIkC,KAAK,CAACJ,YAAY,CAAC,CAAC;EACpD;;;mBA/CS1B,WAAW;AAAA;;SAAXA,WAAW;EAAA+B,SAAX/B,WAAW;EAAAgC,YAFR;AAAM","names":["Subject","throwError","environment","catchError","tap","MenuService","constructor","http","router","apiBaseUrl","menuSource","asObservable","resetSource","onMenuStateChange","event","next","reset","logout","idUsuario","console","error","navigate","post","logoutUrl","pipe","localStorage","removeItem","handleError","getUsuariosList","url","usuariosUrl","errorMessage","ErrorEvent","message","status","Error","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\desta\\Downloads\\FrontEnd\\src\\app\\layout\\app.menu.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { MenuChangeEvent } from './api/menuchangeevent';\nimport { Observable, throwError } from 'rxjs';\nimport {Router} from \"@angular/router\";\nimport {HttpClient, HttpErrorResponse} from \"@angular/common/http\";\nimport {environment} from \"../../environments/environment\";\nimport { catchError, tap } from 'rxjs/operators';\nimport {UserDetails} from \"../models/user-details.model\";\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class MenuService {\n    private usuariosUrl = `${environment.apiBaseUrl}/usuarios/admin/usuarios`;\n    private logoutUrl = `${environment.apiBaseUrl}/session/logout`;\n    private menuSource = new Subject<MenuChangeEvent>();\n    private resetSource = new Subject();\n    constructor(private http: HttpClient, private router: Router) {}\n    menuSource$ = this.menuSource.asObservable();\n    resetSource$ = this.resetSource.asObservable();\n\n    onMenuStateChange(event: MenuChangeEvent) {\n        this.menuSource.next(event);\n    }\n\n    reset() {\n        this.resetSource.next(true);\n    }\n    logout(idUsuario: number | null): Observable<any> {\n        if (idUsuario === null) {\n            console.error('User ID is null, cannot logout');\n            this.router.navigate(['/login']);\n            return throwError('User ID is null, cannot logout');\n        }\n        return this.http.post(this.logoutUrl, { idUsuario }).pipe(\n            tap(() => {\n                localStorage.removeItem('idUsuario');\n                this.router.navigate(['/login']);\n            }),\n            catchError(this.handleError)\n        );\n    }\n    getUsuariosList(idUsuario: number): Observable<UserDetails[]> {\n        const url = `${this.usuariosUrl}/${idUsuario}`;\n        return this.http.post<UserDetails[]>(url,{});\n    }\n    private handleError(error: HttpErrorResponse) {\n        let errorMessage = 'Unknown error occurred!';\n        if (error.error instanceof ErrorEvent) {\n            // A client-side or network error occurred.\n            console.error('An error occurred:', error.error.message);\n            errorMessage = `Client-side error: ${error.error.message}`;\n        } else {\n            // The backend returned an unsuccessful response code.\n            console.error(`Backend returned code ${error.status}, body was: `, error.error);\n            errorMessage = `Server-side error: ${error.status} ${error.error.message}`;\n        }\n        // Return an observable with a user-facing error message.\n        return throwError(() => new Error(errorMessage));\n    }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}