{"ast":null,"code":"import { Subject, throwError } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport { Global } from \"../../utils/Global\";\nimport { environment } from \"../../../environments/environment\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class AuthService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.loginSuccessSubject = new Subject();\n    this.loginUrl = `${environment.apiBaseUrl}/session/login`;\n    this.logoutUrl = `${environment.apiBaseUrl}/session/logout`;\n    this.recoverPasswordUrl = `${environment.apiBaseUrl}/session/cambiarContrasena`;\n  }\n  cambiarContrasena(email, nuevaContrasena) {\n    const body = {\n      mail: email,\n      nuevaContrasena\n    };\n    return this.http.post(this.recoverPasswordUrl, body).pipe(catchError(this.handleError));\n  }\n  login(userName, password) {\n    return this.http.post(this.loginUrl, {\n      userName,\n      password\n    }, {\n      observe: 'response'\n    }).pipe(tap(response => {\n      if (response.status === 200 && response.body) {\n        this.setDataUser(response.body, response.body.idUsuario);\n        this.loginSuccessSubject.next(response.body);\n      }\n    }), catchError(this.handleError));\n  }\n  getLoginSuccessSignal() {\n    return this.loginSuccessSubject.asObservable();\n  }\n  logout(idUsuario) {\n    if (idUsuario === null) {\n      console.error('User ID is null, cannot logout');\n      this.router.navigate(['/login']);\n      return throwError('User ID is null, cannot logout');\n    }\n    return this.http.post(this.logoutUrl, {\n      idUsuario\n    }).pipe(tap(() => {\n      // localStorage.removeItem('idUsuario');\n      this.removeAccount();\n      this.router.navigate(['/login']);\n    }), catchError(this.handleError));\n  }\n  handleError(error) {\n    let errorMessage = 'Unknown error occurred!';\n    if (error.error instanceof ErrorEvent) {\n      console.error('An error occurred:', error.error.message);\n      errorMessage = `Client-side error: ${error.error.message}`;\n    } else {\n      console.error(`Backend returned code ${error.status}, body was: `, error.error);\n      errorMessage = `Server-side error: ${error.status} ${error.error.message}`;\n    }\n    return throwError(() => new Error(errorMessage));\n  }\n  setDataUser(data, userId) {\n    if (this.sessionExists()) {\n      this.removeAccount();\n    }\n    localStorage.setItem(environment.userKey, JSON.stringify(data));\n    localStorage.setItem(environment.userIdKey, userId.toString());\n  }\n  getDataUser() {\n    if (this.sessionExists()) {\n      const objS = localStorage.getItem(environment.userKey);\n      const objid = localStorage.getItem(environment.userIdKey);\n      if (!Global.isNullOrUndefined(objS) && !Global.isNullOrUndefined(objid)) {\n        return [JSON.parse(objS), Number(objid)];\n      }\n    }\n    return null;\n  }\n  sessionExists() {\n    return localStorage.getItem(environment.userKey) !== null && localStorage.getItem(environment.userIdKey) !== null;\n  }\n  removeAccount() {\n    localStorage.removeItem(environment.userKey);\n    localStorage.removeItem(environment.userIdKey);\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAIA,SAAoBA,OAAO,EAAEC,UAAU,QAAO,MAAM;AACpD,SAAQC,UAAU,EAAEC,GAAG,QAAO,gBAAgB;AAC9C,SAAQC,MAAM,QAAO,oBAAoB;AACzC,SAAQC,WAAW,QAAO,mCAAmC;;;;AAQ7D,OAAM,MAAOC,WAAW;EAMpBC,YAAoBC,IAAgB,EAAUC,MAAc;IAAxC,SAAI,GAAJD,IAAI;IAAsB,WAAM,GAANC,MAAM;IAL5C,wBAAmB,GAAG,IAAIT,OAAO,EAAe;IAChD,aAAQ,GAAG,GAAGK,WAAW,CAACK,UAAU,gBAAgB;IACpD,cAAS,GAAG,GAAGL,WAAW,CAACK,UAAU,iBAAiB;IACtD,uBAAkB,GAAG,GAAGL,WAAW,CAACK,UAAU,4BAA4B;EAGlF;EAEAC,iBAAiB,CAACC,KAAa,EAAEC,eAAuB;IACpD,MAAMC,IAAI,GAAG;MAACC,IAAI,EAAEH,KAAK;MAAEC;IAAe,CAAC;IAC3C,OAAO,IAAI,CAACL,IAAI,CAACQ,IAAI,CAAC,IAAI,CAACC,kBAAkB,EAAEH,IAAI,CAAC,CAACI,IAAI,CACrDhB,UAAU,CAAC,IAAI,CAACiB,WAAW,CAAC,CAC/B;EACL;EAEAC,KAAK,CAACC,QAAgB,EAAEC,QAAgB;IACpC,OAAO,IAAI,CAACd,IAAI,CAACQ,IAAI,CAAM,IAAI,CAACO,QAAQ,EAAE;MAACF,QAAQ;MAAEC;IAAQ,CAAC,EAAE;MAACE,OAAO,EAAE;IAAU,CAAC,CAAC,CACjFN,IAAI,CACDf,GAAG,CAACsB,QAAQ,IAAG;MACX,IAAIA,QAAQ,CAACC,MAAM,KAAK,GAAG,IAAID,QAAQ,CAACX,IAAI,EAAE;QAC1C,IAAI,CAACa,WAAW,CAACF,QAAQ,CAACX,IAAI,EAAEW,QAAQ,CAACX,IAAI,CAACc,SAAS,CAAC;QACxD,IAAI,CAACC,mBAAmB,CAACC,IAAI,CAACL,QAAQ,CAACX,IAAI,CAAC;;IAEpD,CAAC,CAAC,EACFZ,UAAU,CAAC,IAAI,CAACiB,WAAW,CAAC,CAC/B;EACT;EAEAY,qBAAqB;IACjB,OAAO,IAAI,CAACF,mBAAmB,CAACG,YAAY,EAAE;EAClD;EAEAC,MAAM,CAACL,SAAwB;IAC3B,IAAIA,SAAS,KAAK,IAAI,EAAE;MACpBM,OAAO,CAACC,KAAK,CAAC,gCAAgC,CAAC;MAC/C,IAAI,CAAC1B,MAAM,CAAC2B,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;MAChC,OAAOnC,UAAU,CAAC,gCAAgC,CAAC;;IAEvD,OAAO,IAAI,CAACO,IAAI,CAACQ,IAAI,CAAC,IAAI,CAACqB,SAAS,EAAE;MAACT;IAAS,CAAC,CAAC,CAACV,IAAI,CACnDf,GAAG,CAAC,MAAK;MACL;MACA,IAAI,CAACmC,aAAa,EAAE;MACpB,IAAI,CAAC7B,MAAM,CAAC2B,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;IACpC,CAAC,CAAC,EACFlC,UAAU,CAAC,IAAI,CAACiB,WAAW,CAAC,CAC/B;EACL;EAEQA,WAAW,CAACgB,KAAwB;IACxC,IAAII,YAAY,GAAG,yBAAyB;IAC5C,IAAIJ,KAAK,CAACA,KAAK,YAAYK,UAAU,EAAE;MACnCN,OAAO,CAACC,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAACA,KAAK,CAACM,OAAO,CAAC;MACxDF,YAAY,GAAG,sBAAsBJ,KAAK,CAACA,KAAK,CAACM,OAAO,EAAE;KAC7D,MAAM;MACHP,OAAO,CAACC,KAAK,CAAC,yBAAyBA,KAAK,CAACT,MAAM,cAAc,EAAES,KAAK,CAACA,KAAK,CAAC;MAC/EI,YAAY,GAAG,sBAAsBJ,KAAK,CAACT,MAAM,IAAIS,KAAK,CAACA,KAAK,CAACM,OAAO,EAAE;;IAE9E,OAAOxC,UAAU,CAAC,MAAM,IAAIyC,KAAK,CAACH,YAAY,CAAC,CAAC;EACpD;EAEOZ,WAAW,CAACgB,IAAU,EAAEC,MAAc;IACzC,IAAI,IAAI,CAACC,aAAa,EAAE,EAAE;MACtB,IAAI,CAACP,aAAa,EAAE;;IAExBQ,YAAY,CAACC,OAAO,CAAC1C,WAAW,CAAC2C,OAAO,EAAEC,IAAI,CAACC,SAAS,CAACP,IAAI,CAAC,CAAC;IAC/DG,YAAY,CAACC,OAAO,CAAC1C,WAAW,CAAC8C,SAAS,EAAEP,MAAM,CAACQ,QAAQ,EAAE,CAAC;EAClE;EAEOC,WAAW;IACd,IAAI,IAAI,CAACR,aAAa,EAAE,EAAE;MACtB,MAAMS,IAAI,GAAGR,YAAY,CAACS,OAAO,CAAClD,WAAW,CAAC2C,OAAO,CAAC;MACtD,MAAMQ,KAAK,GAAGV,YAAY,CAACS,OAAO,CAAClD,WAAW,CAAC8C,SAAS,CAAC;MACzD,IAAI,CAAC/C,MAAM,CAACqD,iBAAiB,CAACH,IAAI,CAAC,IAAI,CAAClD,MAAM,CAACqD,iBAAiB,CAACD,KAAK,CAAC,EAAE;QACrE,OAAO,CAAEP,IAAI,CAACS,KAAK,CAACJ,IAAK,CAAiB,EAAEK,MAAM,CAACH,KAAK,CAAC,CAAC;;;IAGlE,OAAO,IAAI;EACf;EAEOX,aAAa;IAChB,OAAOC,YAAY,CAACS,OAAO,CAAClD,WAAW,CAAC2C,OAAO,CAAC,KAAK,IAAI,IAAIF,YAAY,CAACS,OAAO,CAAClD,WAAW,CAAC8C,SAAS,CAAC,KAAK,IAAI;EACrH;EAEOb,aAAa;IAChBQ,YAAY,CAACc,UAAU,CAACvD,WAAW,CAAC2C,OAAO,CAAC;IAC5CF,YAAY,CAACc,UAAU,CAACvD,WAAW,CAAC8C,SAAS,CAAC;EAClD;;;mBAvFS7C,WAAW;AAAA;;SAAXA,WAAW;EAAAuD,SAAXvD,WAAW;EAAAwD,YAFR;AAAM","names":["Subject","throwError","catchError","tap","Global","environment","AuthService","constructor","http","router","apiBaseUrl","cambiarContrasena","email","nuevaContrasena","body","mail","post","recoverPasswordUrl","pipe","handleError","login","userName","password","loginUrl","observe","response","status","setDataUser","idUsuario","loginSuccessSubject","next","getLoginSuccessSignal","asObservable","logout","console","error","navigate","logoutUrl","removeAccount","errorMessage","ErrorEvent","message","Error","data","userId","sessionExists","localStorage","setItem","userKey","JSON","stringify","userIdKey","toString","getDataUser","objS","getItem","objid","isNullOrUndefined","parse","Number","removeItem","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\desta\\Downloads\\FrontEnd\\src\\app\\service\\auth\\auth.service.ts"],"sourcesContent":["import {Injectable} from '@angular/core';\r\nimport {HttpClient, HttpErrorResponse, HttpResponse} from '@angular/common/http';\r\n\r\nimport {Router} from '@angular/router';\r\nimport {Observable, Subject, throwError} from 'rxjs';\r\nimport {catchError, tap} from 'rxjs/operators';\r\nimport {Global} from \"../../utils/Global\";\r\nimport {environment} from \"../../../environments/environment\";\r\nimport {User} from \"../../models/user.model\";\r\nimport {UserDetails} from '../../models/user-details.model';\r\n\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n    private loginSuccessSubject = new Subject<UserDetails>();\r\n    private loginUrl = `${environment.apiBaseUrl}/session/login`;\r\n    private logoutUrl = `${environment.apiBaseUrl}/session/logout`;\r\n    private recoverPasswordUrl = `${environment.apiBaseUrl}/session/cambiarContrasena`;\r\n\r\n    constructor(private http: HttpClient, private router: Router) {\r\n    }\r\n\r\n    cambiarContrasena(email: string, nuevaContrasena: string): Observable<any> {\r\n        const body = {mail: email, nuevaContrasena};\r\n        return this.http.post(this.recoverPasswordUrl, body).pipe(\r\n            catchError(this.handleError)\r\n        );\r\n    }\r\n\r\n    login(userName: string, password: string): Observable<HttpResponse<any>> {\r\n        return this.http.post<any>(this.loginUrl, {userName, password}, {observe: 'response'})\r\n            .pipe(\r\n                tap(response => {\r\n                    if (response.status === 200 && response.body) {\r\n                        this.setDataUser(response.body, response.body.idUsuario);\r\n                        this.loginSuccessSubject.next(response.body);\r\n                    }\r\n                }),\r\n                catchError(this.handleError)\r\n            );\r\n    }\r\n\r\n    getLoginSuccessSignal(): Observable<UserDetails> {\r\n        return this.loginSuccessSubject.asObservable();\r\n    }\r\n\r\n    logout(idUsuario: number | null): Observable<any> {\r\n        if (idUsuario === null) {\r\n            console.error('User ID is null, cannot logout');\r\n            this.router.navigate(['/login']);\r\n            return throwError('User ID is null, cannot logout');\r\n        }\r\n        return this.http.post(this.logoutUrl, {idUsuario}).pipe(\r\n            tap(() => {\r\n                // localStorage.removeItem('idUsuario');\r\n                this.removeAccount();\r\n                this.router.navigate(['/login']);\r\n            }),\r\n            catchError(this.handleError)\r\n        );\r\n    }\r\n\r\n    private handleError(error: HttpErrorResponse) {\r\n        let errorMessage = 'Unknown error occurred!';\r\n        if (error.error instanceof ErrorEvent) {\r\n            console.error('An error occurred:', error.error.message);\r\n            errorMessage = `Client-side error: ${error.error.message}`;\r\n        } else {\r\n            console.error(`Backend returned code ${error.status}, body was: `, error.error);\r\n            errorMessage = `Server-side error: ${error.status} ${error.error.message}`;\r\n        }\r\n        return throwError(() => new Error(errorMessage));\r\n    }\r\n\r\n    public setDataUser(data: User, userId: number): void {\r\n        if (this.sessionExists()) {\r\n            this.removeAccount();\r\n        }\r\n        localStorage.setItem(environment.userKey, JSON.stringify(data));\r\n        localStorage.setItem(environment.userIdKey, userId.toString());\r\n    }\r\n\r\n    public getDataUser(): [UserDetails, number] | null {\r\n        if (this.sessionExists()) {\r\n            const objS = localStorage.getItem(environment.userKey);\r\n            const objid = localStorage.getItem(environment.userIdKey);\r\n            if (!Global.isNullOrUndefined(objS) && !Global.isNullOrUndefined(objid)) {\r\n                return [(JSON.parse(objS!) as UserDetails), Number(objid)];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public sessionExists(): boolean {\r\n        return localStorage.getItem(environment.userKey) !== null && localStorage.getItem(environment.userIdKey) !== null;\r\n    }\r\n\r\n    public removeAccount(): void {\r\n        localStorage.removeItem(environment.userKey);\r\n        localStorage.removeItem(environment.userIdKey);\r\n    }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}