{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from \"@angular/forms\";\nimport { MessageService } from \"primeng/api\";\nlet LoginComponent = class LoginComponent {\n  constructor(fb, authService, router, messageService) {\n    this.fb = fb;\n    this.authService = authService;\n    this.router = router;\n    this.messageService = messageService;\n    this.loginForm = this.fb.group({\n      userName: ['', [Validators.required, Validators.minLength(8), Validators.maxLength(20)]],\n      password: ['', [Validators.required, Validators.minLength(8)]]\n    });\n  }\n  onLogin() {\n    if (this.loginForm.valid) {\n      this.authService.login(this.loginForm.value.userName, this.loginForm.value.password).subscribe({\n        next: response => {\n          this.router.navigate(['/dashboard']).then(navigation => {\n            if (!navigation) {\n              console.error('Navigation to dashboard failed');\n            }\n          });\n        },\n        error: error => {\n          this.messageService.add({\n            severity: 'error',\n            summary: 'Login Failed',\n            detail: 'Invalid username or password'\n          });\n        }\n      });\n    } else {\n      this.messageService.add({\n        severity: 'error',\n        summary: 'Validation Error',\n        detail: 'Check your username and password'\n      });\n    }\n  }\n  // Redirige al usuario a la página de recuperación de contraseña\n  onForgotPassword() {\n    this.router.navigate(['/recover-password']).then(() => {\n      console.log('Redireccionado a la página de recuperación de contraseña');\n      this.messageService.add({\n        severity: 'info',\n        summary: '¡Todo está bien!',\n        detail: 'Redireccionado a la página de recuperación de contraseña'\n      });\n    }).catch(err => {\n      console.error('Error al redirigir a la página de recuperación de contraseña', err);\n      this.messageService.add({\n        severity: 'warn',\n        summary: '¡Tenemos un problema!',\n        detail: 'Error al redirigir a la página de recuperación de contraseña'\n      });\n    });\n  }\n};\nLoginComponent = __decorate([Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss'],\n  providers: [MessageService]\n})], LoginComponent);\nexport { LoginComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AACzC,SAAiCC,UAAU,QAAQ,gBAAgB;AAGnE,SAASC,cAAc,QAAQ,aAAa;AAQrC,IAAMC,cAAc,GAApB,MAAMA,cAAc;EAGvBC,YACYC,EAAe,EACfC,WAAwB,EACxBC,MAAc,EACdC,cAA8B;IAH9B,OAAE,GAAFH,EAAE;IACF,gBAAW,GAAXC,WAAW;IACX,WAAM,GAANC,MAAM;IACN,mBAAc,GAAdC,cAAc;IAEtB,IAAI,CAACC,SAAS,GAAG,IAAI,CAACJ,EAAE,CAACK,KAAK,CAAC;MAC3BC,QAAQ,EAAE,CAAC,EAAE,EAAE,CAACV,UAAU,CAACW,QAAQ,EAAEX,UAAU,CAACY,SAAS,CAAC,CAAC,CAAC,EAAEZ,UAAU,CAACa,SAAS,CAAC,EAAE,CAAC,CAAC,CAAC;MACxFC,QAAQ,EAAE,CAAC,EAAE,EAAE,CAACd,UAAU,CAACW,QAAQ,EAAEX,UAAU,CAACY,SAAS,CAAC,CAAC,CAAC,CAAC;KAChE,CAAC;EACN;EAEAG,OAAO;IACH,IAAI,IAAI,CAACP,SAAS,CAACQ,KAAK,EAAE;MACtB,IAAI,CAACX,WAAW,CAACY,KAAK,CAAC,IAAI,CAACT,SAAS,CAACU,KAAK,CAACR,QAAQ,EAAE,IAAI,CAACF,SAAS,CAACU,KAAK,CAACJ,QAAQ,CAAC,CAC/EK,SAAS,CAAC;QACPC,IAAI,EAAGC,QAAQ,IAAI;UACf,IAAI,CAACf,MAAM,CAACgB,QAAQ,CAAC,CAAC,YAAY,CAAC,CAAC,CAACC,IAAI,CAACC,UAAU,IAAG;YACnD,IAAI,CAACA,UAAU,EAAE;cACbC,OAAO,CAACC,KAAK,CAAC,gCAAgC,CAAC;;UAEvD,CAAC,CAAC;QACN,CAAC;QACDA,KAAK,EAAGA,KAAK,IAAI;UACb,IAAI,CAACnB,cAAc,CAACoB,GAAG,CAAC;YACpBC,QAAQ,EAAE,OAAO;YACjBC,OAAO,EAAE,cAAc;YACvBC,MAAM,EAAE;WACX,CAAC;QACN;OACH,CAAC;KACT,MAAM;MACH,IAAI,CAACvB,cAAc,CAACoB,GAAG,CAAC;QACpBC,QAAQ,EAAE,OAAO;QACjBC,OAAO,EAAE,kBAAkB;QAC3BC,MAAM,EAAE;OACX,CAAC;;EAEV;EAMA;EACAC,gBAAgB;IACZ,IAAI,CAACzB,MAAM,CAACgB,QAAQ,CAAC,CAAC,mBAAmB,CAAC,CAAC,CACtCC,IAAI,CAAC,MAAK;MACPE,OAAO,CAACO,GAAG,CAAC,0DAA0D,CAAC;MACvE,IAAI,CAACzB,cAAc,CAACoB,GAAG,CAAC;QACpBC,QAAQ,EAAE,MAAM;QAChBC,OAAO,EAAE,kBAAkB;QAC3BC,MAAM,EAAE;OACX,CAAC;IACN,CAAC,CAAC,CACDG,KAAK,CAACC,GAAG,IAAG;MACTT,OAAO,CAACC,KAAK,CAAC,8DAA8D,EAAEQ,GAAG,CAAC;MAClF,IAAI,CAAC3B,cAAc,CAACoB,GAAG,CAAC;QACpBC,QAAQ,EAAE,MAAM;QAChBC,OAAO,EAAE,uBAAuB;QAChCC,MAAM,EAAE;OACX,CAAC;IACN,CAAC,CAAC;EACV;CACH;AAnEY5B,cAAc,eAN1BH,SAAS,CAAC;EACPoC,QAAQ,EAAE,WAAW;EACrBC,WAAW,EAAE,wBAAwB;EACrCC,SAAS,EAAE,CAAC,wBAAwB,CAAC;EACrCC,SAAS,EAAE,CAACrC,cAAc;CAC7B,CAAC,GACWC,cAAc,CAmE1B;SAnEYA,cAAc","names":["Component","Validators","MessageService","LoginComponent","constructor","fb","authService","router","messageService","loginForm","group","userName","required","minLength","maxLength","password","onLogin","valid","login","value","subscribe","next","response","navigate","then","navigation","console","error","add","severity","summary","detail","onForgotPassword","log","catch","err","selector","templateUrl","styleUrls","providers"],"sourceRoot":"","sources":["C:\\Users\\desta\\Downloads\\FrontEnd\\src\\app\\views\\login\\login.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from \"@angular/forms\";\nimport { AuthService } from \"../../service/auth/auth.service\";\nimport { Router } from \"@angular/router\";\nimport { MessageService } from \"primeng/api\";\n\n@Component({\n    selector: 'app-login',\n    templateUrl: './login.component.html',\n    styleUrls: ['./login.component.scss'],\n    providers: [MessageService]\n})\nexport class LoginComponent {\n    loginForm: FormGroup;\n\n    constructor(\n        private fb: FormBuilder,\n        private authService: AuthService,\n        private router: Router,\n        private messageService: MessageService\n    ) {\n        this.loginForm = this.fb.group({\n            userName: ['', [Validators.required, Validators.minLength(8), Validators.maxLength(20)]],\n            password: ['', [Validators.required, Validators.minLength(8)]]\n        });\n    }\n\n    onLogin(): void {\n        if (this.loginForm.valid) {\n            this.authService.login(this.loginForm.value.userName, this.loginForm.value.password)\n                .subscribe({\n                    next: (response) => {\n                        this.router.navigate(['/dashboard']).then(navigation => {\n                            if (!navigation) {\n                                console.error('Navigation to dashboard failed');\n                            }\n                        });\n                    },\n                    error: (error) => {\n                        this.messageService.add({\n                            severity: 'error',\n                            summary: 'Login Failed',\n                            detail: 'Invalid username or password'\n                        });\n                    }\n                });\n        } else {\n            this.messageService.add({\n                severity: 'error',\n                summary: 'Validation Error',\n                detail: 'Check your username and password'\n            });\n        }\n    }\n\n\n\n\n\n    // Redirige al usuario a la página de recuperación de contraseña\n    onForgotPassword(): void {\n        this.router.navigate(['/recover-password'])\n            .then(() => {\n                console.log('Redireccionado a la página de recuperación de contraseña');\n                this.messageService.add({\n                    severity: 'info',\n                    summary: '¡Todo está bien!',\n                    detail: 'Redireccionado a la página de recuperación de contraseña'\n                });\n            })\n            .catch(err => {\n                console.error('Error al redirigir a la página de recuperación de contraseña', err);\n                this.messageService.add({\n                    severity: 'warn',\n                    summary: '¡Tenemos un problema!',\n                    detail: 'Error al redirigir a la página de recuperación de contraseña'\n                });\n            });\n    }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}