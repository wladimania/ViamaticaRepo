{"ast":null,"code":"import { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class LayoutService {\n  constructor() {\n    this.config = {\n      ripple: false,\n      inputStyle: 'outlined',\n      menuMode: 'static',\n      colorScheme: 'light',\n      theme: 'lara-light-indigo',\n      scale: 14\n    };\n    this.state = {\n      staticMenuDesktopInactive: false,\n      overlayMenuActive: false,\n      profileSidebarVisible: false,\n      configSidebarVisible: false,\n      staticMenuMobileActive: false,\n      menuHoverActive: false\n    };\n    this.configUpdate = new Subject();\n    this.overlayOpen = new Subject();\n    this.configUpdate$ = this.configUpdate.asObservable();\n    this.overlayOpen$ = this.overlayOpen.asObservable();\n  }\n  onMenuToggle() {\n    if (this.isOverlay()) {\n      this.state.overlayMenuActive = !this.state.overlayMenuActive;\n      if (this.state.overlayMenuActive) {\n        this.overlayOpen.next(null);\n      }\n    }\n    if (this.isDesktop()) {\n      this.state.staticMenuDesktopInactive = !this.state.staticMenuDesktopInactive;\n    } else {\n      this.state.staticMenuMobileActive = !this.state.staticMenuMobileActive;\n      if (this.state.staticMenuMobileActive) {\n        this.overlayOpen.next(null);\n      }\n    }\n  }\n  showProfileSidebar() {\n    this.state.profileSidebarVisible = !this.state.profileSidebarVisible;\n    if (this.state.profileSidebarVisible) {\n      this.overlayOpen.next(null);\n    }\n  }\n  showConfigSidebar() {\n    this.state.configSidebarVisible = true;\n  }\n  isOverlay() {\n    return this.config.menuMode === 'overlay';\n  }\n  isDesktop() {\n    return window.innerWidth > 991;\n  }\n  isMobile() {\n    return !this.isDesktop();\n  }\n  onConfigUpdate() {\n    this.configUpdate.next(this.config);\n  }\n}\nLayoutService.ɵfac = function LayoutService_Factory(t) {\n  return new (t || LayoutService)();\n};\nLayoutService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: LayoutService,\n  factory: LayoutService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAASA,OAAO,QAAQ,MAAM;;AAuB9B,OAAM,MAAOC,aAAa;EAH1BC;IAKI,WAAM,GAAc;MAChBC,MAAM,EAAE,KAAK;MACbC,UAAU,EAAE,UAAU;MACtBC,QAAQ,EAAE,QAAQ;MAClBC,WAAW,EAAE,OAAO;MACpBC,KAAK,EAAE,mBAAmB;MAC1BC,KAAK,EAAE;KACV;IAED,UAAK,GAAgB;MACjBC,yBAAyB,EAAE,KAAK;MAChCC,iBAAiB,EAAE,KAAK;MACxBC,qBAAqB,EAAE,KAAK;MAC5BC,oBAAoB,EAAE,KAAK;MAC3BC,sBAAsB,EAAE,KAAK;MAC7BC,eAAe,EAAE;KACpB;IAEO,iBAAY,GAAG,IAAId,OAAO,EAAa;IAEvC,gBAAW,GAAG,IAAIA,OAAO,EAAO;IAExC,kBAAa,GAAG,IAAI,CAACe,YAAY,CAACC,YAAY,EAAE;IAEhD,iBAAY,GAAG,IAAI,CAACC,WAAW,CAACD,YAAY,EAAE;;EAE9CE,YAAY;IACR,IAAI,IAAI,CAACC,SAAS,EAAE,EAAE;MAClB,IAAI,CAACC,KAAK,CAACV,iBAAiB,GAAG,CAAC,IAAI,CAACU,KAAK,CAACV,iBAAiB;MAC5D,IAAI,IAAI,CAACU,KAAK,CAACV,iBAAiB,EAAE;QAC9B,IAAI,CAACO,WAAW,CAACI,IAAI,CAAC,IAAI,CAAC;;;IAInC,IAAI,IAAI,CAACC,SAAS,EAAE,EAAE;MAClB,IAAI,CAACF,KAAK,CAACX,yBAAyB,GAAG,CAAC,IAAI,CAACW,KAAK,CAACX,yBAAyB;KAC/E,MACI;MACD,IAAI,CAACW,KAAK,CAACP,sBAAsB,GAAG,CAAC,IAAI,CAACO,KAAK,CAACP,sBAAsB;MAEtE,IAAI,IAAI,CAACO,KAAK,CAACP,sBAAsB,EAAE;QACnC,IAAI,CAACI,WAAW,CAACI,IAAI,CAAC,IAAI,CAAC;;;EAGvC;EAEAE,kBAAkB;IACd,IAAI,CAACH,KAAK,CAACT,qBAAqB,GAAG,CAAC,IAAI,CAACS,KAAK,CAACT,qBAAqB;IACpE,IAAI,IAAI,CAACS,KAAK,CAACT,qBAAqB,EAAE;MAClC,IAAI,CAACM,WAAW,CAACI,IAAI,CAAC,IAAI,CAAC;;EAEnC;EAEAG,iBAAiB;IACb,IAAI,CAACJ,KAAK,CAACR,oBAAoB,GAAG,IAAI;EAC1C;EAEAO,SAAS;IACL,OAAO,IAAI,CAACM,MAAM,CAACpB,QAAQ,KAAK,SAAS;EAC7C;EAEAiB,SAAS;IACL,OAAOI,MAAM,CAACC,UAAU,GAAG,GAAG;EAClC;EAEAC,QAAQ;IACJ,OAAO,CAAC,IAAI,CAACN,SAAS,EAAE;EAC5B;EAEAO,cAAc;IACV,IAAI,CAACd,YAAY,CAACM,IAAI,CAAC,IAAI,CAACI,MAAM,CAAC;EACvC;;;mBAzESxB,aAAa;AAAA;;SAAbA,aAAa;EAAA6B,SAAb7B,aAAa;EAAA8B,YAFV;AAAM","names":["Subject","LayoutService","constructor","ripple","inputStyle","menuMode","colorScheme","theme","scale","staticMenuDesktopInactive","overlayMenuActive","profileSidebarVisible","configSidebarVisible","staticMenuMobileActive","menuHoverActive","configUpdate","asObservable","overlayOpen","onMenuToggle","isOverlay","state","next","isDesktop","showProfileSidebar","showConfigSidebar","config","window","innerWidth","isMobile","onConfigUpdate","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\desta\\Downloads\\FrontEnd\\src\\app\\layout\\service\\app.layout.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\n\nexport interface AppConfig {\n    inputStyle: string;\n    colorScheme: string;\n    theme: string;\n    ripple: boolean;\n    menuMode: string;\n    scale: number;\n}\n\ninterface LayoutState {\n    staticMenuDesktopInactive: boolean;\n    overlayMenuActive: boolean;\n    profileSidebarVisible: boolean;\n    configSidebarVisible: boolean;\n    staticMenuMobileActive: boolean;\n    menuHoverActive: boolean;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class LayoutService {\n\n    config: AppConfig = {\n        ripple: false,\n        inputStyle: 'outlined',\n        menuMode: 'static',\n        colorScheme: 'light',\n        theme: 'lara-light-indigo',\n        scale: 14,\n    };\n\n    state: LayoutState = {\n        staticMenuDesktopInactive: false,\n        overlayMenuActive: false,\n        profileSidebarVisible: false,\n        configSidebarVisible: false,\n        staticMenuMobileActive: false,\n        menuHoverActive: false\n    };\n\n    private configUpdate = new Subject<AppConfig>();\n\n    private overlayOpen = new Subject<any>();\n\n    configUpdate$ = this.configUpdate.asObservable();\n\n    overlayOpen$ = this.overlayOpen.asObservable();\n\n    onMenuToggle() {\n        if (this.isOverlay()) {\n            this.state.overlayMenuActive = !this.state.overlayMenuActive;\n            if (this.state.overlayMenuActive) {\n                this.overlayOpen.next(null);\n            }\n        }\n\n        if (this.isDesktop()) {\n            this.state.staticMenuDesktopInactive = !this.state.staticMenuDesktopInactive;\n        }\n        else {\n            this.state.staticMenuMobileActive = !this.state.staticMenuMobileActive;\n\n            if (this.state.staticMenuMobileActive) {\n                this.overlayOpen.next(null);\n            }\n        }\n    }\n\n    showProfileSidebar() {\n        this.state.profileSidebarVisible = !this.state.profileSidebarVisible;\n        if (this.state.profileSidebarVisible) {\n            this.overlayOpen.next(null);\n        }\n    }\n\n    showConfigSidebar() {\n        this.state.configSidebarVisible = true;\n    }\n\n    isOverlay() {\n        return this.config.menuMode === 'overlay';\n    }\n\n    isDesktop() {\n        return window.innerWidth > 991;\n    }\n\n    isMobile() {\n        return !this.isDesktop();\n    }\n\n    onConfigUpdate() {\n        this.configUpdate.next(this.config);\n    }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}