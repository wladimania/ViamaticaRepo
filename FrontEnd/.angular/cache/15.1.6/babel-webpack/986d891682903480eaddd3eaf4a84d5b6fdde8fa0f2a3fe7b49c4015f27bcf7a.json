{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport { Global } from \"../../utils/Global\";\nimport { environment } from \"../../../environments/environment\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class AuthService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.loginUrl = `${environment.apiBaseUrl}/session/login`;\n    this.logoutUrl = `${environment.apiBaseUrl}/session/logout`;\n    this.recoverPasswordUrl = `${environment.apiBaseUrl}/session/cambiarContrasena`;\n  }\n  cambiarContrasena(email, nuevaContrasena) {\n    const body = {\n      mail: email,\n      nuevaContrasena\n    };\n    return this.http.post(this.recoverPasswordUrl, body).pipe(catchError(this.handleError));\n  }\n  // Función que maneja el inicio de sesión\n  onLogin() {\n    if (this.loginForm.valid) {\n      this.authService.login(this.loginForm.value.userName, this.loginForm.value.password).subscribe({\n        next: response => {\n          // Si se recibe una respuesta con el campo idUsuario\n          if (response.body && response.body.idUsuario) {\n            // Almacenar el idUsuario en el localStorage\n            localStorage.setItem('idUsuario', response.body.idUsuario.toString());\n            // Redirigir al usuario al dashboard\n            this.router.navigate(['/dashboard']);\n          } else {\n            console.error('User details not found', response);\n            this.messageService.add({\n              severity: 'error',\n              summary: 'Problemas en el inicio de sesión',\n              detail: 'No se encontraron los detalles del usuario en la respuesta'\n            });\n          }\n        },\n        error: error => {\n          console.error('Error during login', error);\n          this.messageService.add({\n            severity: 'error',\n            summary: 'Problemas en el inicio de sesión',\n            detail: error.message || 'Error desconocido durante el inicio de sesión'\n          });\n        }\n      });\n    } else {\n      console.error('Form is not valid', this.loginForm.errors);\n      this.messageService.add({\n        severity: 'warn',\n        summary: '¡Tenemos un problema!',\n        detail: 'Formulario inválido: ' + JSON.stringify(this.loginForm.errors)\n      });\n    }\n  }\n  logout(idUsuario) {\n    if (idUsuario === null) {\n      console.error('User ID is null, cannot logout');\n      this.router.navigate(['/login']);\n      return throwError('User ID is null, cannot logout');\n    }\n    return this.http.post(this.logoutUrl, {\n      idUsuario\n    }).pipe(tap(() => {\n      localStorage.removeItem('idUsuario');\n      this.router.navigate(['/login']);\n    }), catchError(this.handleError));\n  }\n  handleError(error) {\n    let errorMessage = 'Unknown error occurred!';\n    if (error.error instanceof ErrorEvent) {\n      // A client-side or network error occurred.\n      console.error('An error occurred:', error.error.message);\n      errorMessage = `Client-side error: ${error.error.message}`;\n    } else {\n      // The backend returned an unsuccessful response code.\n      console.error(`Backend returned code ${error.status}, body was: `, error.error);\n      errorMessage = `Server-side error: ${error.status} ${error.error.message}`;\n    }\n    // Return an observable with a user-facing error message.\n    return throwError(() => new Error(errorMessage));\n  }\n  /* METODOS DE PERSISTENCIA DE SESION */\n  setDataUser(data) {\n    // Quitar sesión remanente en caso de existir\n    if (this.sessionExists()) {\n      this.removeAccount();\n    }\n    localStorage.setItem(environment.userKey, JSON.stringify(data));\n  }\n  getDataUser() {\n    if (this.sessionExists()) {\n      const objS = localStorage.getItem(environment.userKey);\n      if (objS !== null && !Global.isNullOrUndefined(objS)) {\n        return JSON.parse(objS);\n      }\n    }\n    return null;\n  }\n  sessionExists() {\n    return localStorage.getItem(environment.userKey) !== null;\n  }\n  removeAccount() {\n    localStorage.removeItem(environment.userKey);\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["throwError","catchError","tap","Global","environment","AuthService","constructor","http","router","apiBaseUrl","cambiarContrasena","email","nuevaContrasena","body","mail","post","recoverPasswordUrl","pipe","handleError","onLogin","loginForm","valid","authService","login","value","userName","password","subscribe","next","response","idUsuario","localStorage","setItem","toString","navigate","console","error","messageService","add","severity","summary","detail","message","errors","JSON","stringify","logout","logoutUrl","removeItem","errorMessage","ErrorEvent","status","Error","setDataUser","data","sessionExists","removeAccount","userKey","getDataUser","objS","getItem","isNullOrUndefined","parse","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\desta\\Downloads\\FrontEnd\\src\\app\\service\\auth\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {HttpClient, HttpErrorResponse, HttpParams, HttpResponse} from '@angular/common/http';\nimport { Router } from '@angular/router';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport {Global} from \"../../utils/Global\";\nimport {environment} from \"../../../environments/environment\";\nimport {User} from \"../../models/user.model\";\nimport { UserDetails } from '../../models/user-details.model';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private loginUrl = `${environment.apiBaseUrl}/session/login`;\n  private logoutUrl = `${environment.apiBaseUrl}/session/logout`;\n  private recoverPasswordUrl = `${environment.apiBaseUrl}/session/cambiarContrasena`;\n\n  constructor(private http: HttpClient, private router: Router) {}\n\n  cambiarContrasena(email: string, nuevaContrasena: string): Observable<any> {\n    const body = { mail: email, nuevaContrasena };\n    return this.http.post(this.recoverPasswordUrl, body).pipe(\n      catchError(this.handleError)\n    );\n  }\n    // Función que maneja el inicio de sesión\n    onLogin(): void {\n        if (this.loginForm.valid) {\n            this.authService.login(this.loginForm.value.userName, this.loginForm.value.password)\n                .subscribe({\n                    next: (response: HttpResponse<any>) => {\n                        // Si se recibe una respuesta con el campo idUsuario\n                        if (response.body && response.body.idUsuario) {\n                            // Almacenar el idUsuario en el localStorage\n                            localStorage.setItem('idUsuario', response.body.idUsuario.toString());\n                            // Redirigir al usuario al dashboard\n                            this.router.navigate(['/dashboard']);\n                        } else {\n                            console.error('User details not found', response);\n                            this.messageService.add({\n                                severity: 'error',\n                                summary: 'Problemas en el inicio de sesión',\n                                detail: 'No se encontraron los detalles del usuario en la respuesta'\n                            });\n                        }\n                    },\n                    error: (error: any) => {\n                        console.error('Error during login', error);\n                        this.messageService.add({\n                            severity: 'error',\n                            summary: 'Problemas en el inicio de sesión',\n                            detail: error.message || 'Error desconocido durante el inicio de sesión'\n                        });\n                    }\n                });\n        } else {\n            console.error('Form is not valid', this.loginForm.errors);\n            this.messageService.add({\n                severity: 'warn',\n                summary: '¡Tenemos un problema!',\n                detail: 'Formulario inválido: ' + JSON.stringify(this.loginForm.errors)\n            });\n        }\n    }\n\n\n\n  logout(idUsuario: number | null): Observable<any> {\n    if (idUsuario === null) {\n      console.error('User ID is null, cannot logout');\n      this.router.navigate(['/login']);\n      return throwError('User ID is null, cannot logout');\n    }\n    return this.http.post(this.logoutUrl, { idUsuario }).pipe(\n      tap(() => {\n        localStorage.removeItem('idUsuario');\n        this.router.navigate(['/login']);\n      }),\n      catchError(this.handleError)\n    );\n  }\n\n    private handleError(error: HttpErrorResponse) {\n        let errorMessage = 'Unknown error occurred!';\n        if (error.error instanceof ErrorEvent) {\n            // A client-side or network error occurred.\n            console.error('An error occurred:', error.error.message);\n            errorMessage = `Client-side error: ${error.error.message}`;\n        } else {\n            // The backend returned an unsuccessful response code.\n            console.error(`Backend returned code ${error.status}, body was: `, error.error);\n            errorMessage = `Server-side error: ${error.status} ${error.error.message}`;\n        }\n        // Return an observable with a user-facing error message.\n        return throwError(() => new Error(errorMessage));\n    }\n\n  /* METODOS DE PERSISTENCIA DE SESION */\n    public setDataUser(data: User): void {\n        // Quitar sesión remanente en caso de existir\n        if(this.sessionExists()) {\n            this.removeAccount();\n        }\n        localStorage.setItem(environment.userKey, JSON.stringify(data));\n    }\n\n    public getDataUser(): UserDetails | null {\n        if(this.sessionExists()) {\n            const objS = localStorage.getItem(environment.userKey);\n            if (objS !== null && !Global.isNullOrUndefined(objS)) {\n                return (JSON.parse(objS) as UserDetails);\n            }\n        }\n        return null;\n    }\n\n    public sessionExists(): boolean {\n        return localStorage.getItem(environment.userKey) !== null;\n    }\n\n    public removeAccount(): void {\n        localStorage.removeItem(environment.userKey);\n    }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}