{"ast":null,"code":"import * as XLSX from 'xlsx';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../service/usermainten/usermaintenance.service\";\nimport * as i2 from \"../../service/auth/auth.service\";\nimport * as i3 from \"@angular/router\";\nexport class UsermaintenanceComponent {\n  constructor(usermaintenanceService, authService, router) {\n    this.usermaintenanceService = usermaintenanceService;\n    this.authService = authService;\n    this.router = router;\n    this.userDetails = null;\n    this.usersList = [];\n  }\n  ngOnInit() {\n    this.loadUserDetails();\n    this.loadUsersList();\n  }\n  loadUserDetails() {\n    const userDetailsJson = localStorage.getItem('userDetails');\n    if (userDetailsJson) {\n      this.userDetails = JSON.parse(userDetailsJson);\n    }\n  }\n  loadUsersList() {\n    const idUsuario = this.getCurrentidUsuario();\n    this.usermaintenanceService.getUsuariosList(idUsuario).subscribe(users => {\n      this.usersList = users;\n    }, error => {\n      console.error('Error loading users list', error);\n      // Manejar el error aquí si es necesario\n    });\n  }\n\n  logout() {\n    const idUsuario = this.getCurrentidUsuario();\n    this.authService.logout(idUsuario).subscribe(response => {\n      console.log('Logout successful, navigating to login');\n      this.router.navigateByUrl('/login').then(success => {\n        console.log('Navigation to login successful:', success);\n      }).catch(error => {\n        console.error('Navigation to login failed:', error);\n      });\n    }, error => {\n      console.error('Error during logout', error);\n    });\n  }\n  getCurrentidUsuario() {\n    const userIdString = localStorage.getItem('idUsuario');\n    if (userIdString === null) {\n      console.error('No user ID found in localStorage');\n      this.router.navigate(['/login']);\n      return 0;\n    }\n    return parseInt(userIdString, 10);\n  }\n  // Función para abrir el selector de archivo\n  openFileUploader() {\n    const fileUploader = document.getElementById('fileUploader');\n    if (fileUploader) {\n      fileUploader.click();\n    }\n  }\n  handleFileInput(event) {\n    const file = event.target.files[0];\n    const reader = new FileReader();\n    reader.onload = e => {\n      const data = new Uint8Array(e.target.result);\n      const workbook = XLSX.read(data, {\n        type: 'array'\n      });\n      const sheetName = workbook.SheetNames[0];\n      const worksheet = workbook.Sheets[sheetName];\n      const jsonData = XLSX.utils.sheet_to_json(worksheet, {\n        header: 1\n      });\n      jsonData.forEach(row => {\n        if (row.length === 0) {\n          console.log(\"Fila vacía, saltando...\");\n          return; // Saltar la iteración si la fila está vacía\n        }\n\n        console.log(\"Fila actual:\", row);\n        const usuario = {\n          userName: row[0],\n          mail: row[1],\n          password: row[2],\n          status: row[3],\n          intentoFallido: row[4],\n          personaByPersonaIdPersona2: {\n            identificacion: row[5],\n            apellido: row[6],\n            nombres: row[7],\n            idPersona: 0,\n            fechaNacimiento: row[8] // Ajustar el índice para la fecha de nacimiento si es necesario\n          }\n        };\n\n        this.createUser(usuario);\n      });\n    };\n    reader.readAsArrayBuffer(file);\n  }\n  createUser(usuario) {\n    this.usermaintenanceService.createUser(usuario).subscribe(response => {\n      console.log('Usuario creado exitosamente:', response);\n      // Agrega esta línea para imprimir el usuario creado en la consola\n      console.log(usuario);\n    }, error => {\n      console.error('Error al crear el usuario:', error);\n    });\n  }\n}\nUsermaintenanceComponent.ɵfac = function UsermaintenanceComponent_Factory(t) {\n  return new (t || UsermaintenanceComponent)(i0.ɵɵdirectiveInject(i1.UsermaintenanceService), i0.ɵɵdirectiveInject(i2.AuthService), i0.ɵɵdirectiveInject(i3.Router));\n};\nUsermaintenanceComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: UsermaintenanceComponent,\n  selectors: [[\"app-usermaintenance\"]],\n  decls: 2,\n  vars: 0,\n  template: function UsermaintenanceComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"p\");\n      i0.ɵɵtext(1, \"usermaintenance works!\");\n      i0.ɵɵelementEnd();\n    }\n  },\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["XLSX","UsermaintenanceComponent","constructor","usermaintenanceService","authService","router","ngOnInit","loadUserDetails","loadUsersList","userDetailsJson","localStorage","getItem","userDetails","JSON","parse","idUsuario","getCurrentidUsuario","getUsuariosList","subscribe","users","usersList","error","console","logout","response","log","navigateByUrl","then","success","catch","userIdString","navigate","parseInt","openFileUploader","fileUploader","document","getElementById","click","handleFileInput","event","file","target","files","reader","FileReader","onload","e","data","Uint8Array","result","workbook","read","type","sheetName","SheetNames","worksheet","Sheets","jsonData","utils","sheet_to_json","header","forEach","row","length","usuario","userName","mail","password","status","intentoFallido","personaByPersonaIdPersona2","identificacion","apellido","nombres","idPersona","fechaNacimiento","createUser","readAsArrayBuffer","selectors","decls","vars","template","i0"],"sourceRoot":"","sources":["C:\\Users\\desta\\Downloads\\FrontEnd\\src\\app\\views\\usermaintenance\\usermaintenance.component.ts","C:\\Users\\desta\\Downloads\\FrontEnd\\src\\app\\views\\usermaintenance\\usermaintenance.component.html"],"sourcesContent":["import {Component, OnInit} from '@angular/core';\nimport {UserDetails} from \"../../models/user-details.model\";\nimport {AuthService} from \"../../service/auth/auth.service\";\nimport {Router} from \"@angular/router\";\nimport {UsermaintenanceService} from \"../../service/usermainten/usermaintenance.service\";\nimport * as XLSX from 'xlsx';\n@Component({\n  selector: 'app-usermaintenance',\n  templateUrl: './usermaintenance.component.html',\n  styleUrls: ['./usermaintenance.component.scss']\n})\nexport class UsermaintenanceComponent implements OnInit {\n    userDetails: UserDetails | null = null;\n    usersList: UserDetails[] = [];\n\n    constructor(\n        private usermaintenanceService  : UsermaintenanceService,\n        private authService: AuthService,\n        private router: Router\n    ) { }\n\n    ngOnInit(): void {\n        this.loadUserDetails();\n        this.loadUsersList();\n    }\n\n    loadUserDetails() {\n        const userDetailsJson = localStorage.getItem('userDetails');\n        if (userDetailsJson) {\n            this.userDetails = JSON.parse(userDetailsJson);\n        }\n    }\n\n    loadUsersList(): void {\n        const idUsuario = this.getCurrentidUsuario();\n        this.usermaintenanceService.getUsuariosList(idUsuario).subscribe(\n            (users: UserDetails[]) => {\n                this.usersList = users;\n            },\n            error => {\n                console.error('Error loading users list', error);\n                // Manejar el error aquí si es necesario\n            }\n        );\n    }\n\n    logout(): void {\n        const idUsuario = this.getCurrentidUsuario();\n        this.authService.logout(idUsuario).subscribe(\n            response => {\n                console.log('Logout successful, navigating to login');\n                this.router.navigateByUrl('/login').then(success => {\n                    console.log('Navigation to login successful:', success);\n                }).catch(error => {\n                    console.error('Navigation to login failed:', error);\n                });\n            },\n            error => {\n                console.error('Error during logout', error);\n            }\n        );\n    }\n\n    private getCurrentidUsuario(): number {\n        const userIdString = localStorage.getItem('idUsuario');\n        if (userIdString === null) {\n            console.error('No user ID found in localStorage');\n            this.router.navigate(['/login']);\n            return 0;\n        }\n        return parseInt(userIdString, 10);\n    }\n    // Función para abrir el selector de archivo\n    openFileUploader(): void {\n        const fileUploader = document.getElementById('fileUploader');\n        if (fileUploader) {\n            fileUploader.click();\n        }\n    }\n\n    handleFileInput(event: any): void {\n        const file = event.target.files[0];\n        const reader = new FileReader();\n\n        reader.onload = (e: any) => {\n            const data = new Uint8Array(e.target.result);\n            const workbook = XLSX.read(data, { type: 'array' });\n            const sheetName = workbook.SheetNames[0];\n            const worksheet = workbook.Sheets[sheetName];\n            const jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1 });\n\n            jsonData.forEach((row: any) => {\n                if (row.length === 0) {\n                    console.log(\"Fila vacía, saltando...\");\n                    return; // Saltar la iteración si la fila está vacía\n                }\n\n                console.log(\"Fila actual:\", row);\n                const usuario: UserDetails = {\n                    userName: row[0],\n                    mail: row[1],\n                    password: row[2],\n                    status: row[3],\n                    intentoFallido: row[4],\n                    personaByPersonaIdPersona2: {\n                        identificacion: row[5],\n                        apellido: row[6],\n                        nombres: row[7],\n                        idPersona: 0, // Valor predeterminado para idPersona\n                        fechaNacimiento: row[8] // Ajustar el índice para la fecha de nacimiento si es necesario\n                    }\n                };\n\n                this.createUser(usuario);\n            });\n\n\n\n        };\n\n        reader.readAsArrayBuffer(file);\n    }\n\n\n\n    createUser(usuario: UserDetails): void {\n        this.usermaintenanceService.createUser(usuario).subscribe(\n            response => {\n                console.log('Usuario creado exitosamente:', response);\n                // Agrega esta línea para imprimir el usuario creado en la consola\n                console.log(usuario);\n            },\n            error => {\n                console.error('Error al crear el usuario:', error);\n            }\n        );\n    }\n\n\n\n}\n","<p>usermaintenance works!</p>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}