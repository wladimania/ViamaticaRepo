{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"../service/auth/auth.service\";\nexport class GlobalGuardsGuard {\n  constructor(router, accountService) {\n    this.router = router;\n    this.accountService = accountService;\n  }\n  canActivate(route, state) {\n    if (this.accountService.sessionExists()) {\n      const user = this.accountService.getDataUser();\n      // Aquí puedes agregar la lógica de validación de accesos\n      if (this.validateAccess(user)) {\n        return true;\n      } else {\n        // Redirigir al usuario a una página de acceso no autorizado\n        return this.router.parseUrl('/unauthorized');\n      }\n    } else {\n      // Redirigir al usuario a la página de inicio de sesión\n      return this.router.parseUrl('/login');\n    }\n  }\n  validateAccess(user) {\n    // Asegurarse de que user.rolUsuarioByIdUsuario.rolByRolIdRol.rolName no es undefined ni null antes de llamar a includes\n    return !!user.rolUsuarioByIdUsuario.rolByRolIdRol.rolName && user.rolUsuarioByIdUsuario.rolByRolIdRol.rolName.includes('admin'); // Ejemplo: solo los admins pueden acceder\n  }\n}\n\nGlobalGuardsGuard.ɵfac = function GlobalGuardsGuard_Factory(t) {\n  return new (t || GlobalGuardsGuard)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.AuthService));\n};\nGlobalGuardsGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: GlobalGuardsGuard,\n  factory: GlobalGuardsGuard.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;;AAWA,OAAM,MAAOA,iBAAiB;EAE1BC,YAAoBC,MAAc,EACdC,cAA2B;IAD3B,WAAM,GAAND,MAAM;IACN,mBAAc,GAAdC,cAAc;EAClC;EAEAC,WAAW,CACPC,KAA6B,EAC7BC,KAA0B;IAE1B,IAAG,IAAI,CAACH,cAAc,CAACI,aAAa,EAAE,EAAE;MACpC,MAAMC,IAAI,GAAgB,IAAI,CAACL,cAAc,CAACM,WAAW,EAAG;MAC5D;MACA,IAAI,IAAI,CAACC,cAAc,CAACF,IAAI,CAAC,EAAE;QAC3B,OAAO,IAAI;OACd,MAAM;QACH;QACA,OAAO,IAAI,CAACN,MAAM,CAACS,QAAQ,CAAC,eAAe,CAAC;;KAEnD,MAAM;MACH;MACA,OAAO,IAAI,CAACT,MAAM,CAACS,QAAQ,CAAC,QAAQ,CAAC;;EAE7C;EAESD,cAAc,CAACF,IAAiB;IACrC;IACA,OAAO,CAAC,CAACA,IAAI,CAACI,qBAAqB,CAACC,aAAa,CAACC,OAAO,IAAIN,IAAI,CAACI,qBAAqB,CAACC,aAAa,CAACC,OAAO,CAACC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC;EACrI;;;;mBA5BSf,iBAAiB;AAAA;;SAAjBA,iBAAiB;EAAAgB,SAAjBhB,iBAAiB;EAAAiB,YAFd;AAAM","names":["GlobalGuardsGuard","constructor","router","accountService","canActivate","route","state","sessionExists","user","getDataUser","validateAccess","parseUrl","rolUsuarioByIdUsuario","rolByRolIdRol","rolName","includes","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\desta\\Downloads\\FrontEnd\\src\\app\\guards\\global-guards.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot, UrlTree} from '@angular/router';\nimport { Observable } from 'rxjs';\nimport {Global} from \"../utils/Global\";\nimport {AuthService} from \"../service/auth/auth.service\";\nimport {User} from \"../models/user.model\";\nimport {UserDetails} from \"../models/user-details.model\";\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class GlobalGuardsGuard implements CanActivate {\n\n    constructor(private router: Router,\n                private accountService: AuthService) {\n    }\n\n    canActivate(\n        route: ActivatedRouteSnapshot,\n        state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n\n        if(this.accountService.sessionExists()) {\n            const user: UserDetails = this.accountService.getDataUser()!;\n            // Aquí puedes agregar la lógica de validación de accesos\n            if (this.validateAccess(user)) {\n                return true;\n            } else {\n                // Redirigir al usuario a una página de acceso no autorizado\n                return this.router.parseUrl('/unauthorized');\n            }\n        } else {\n            // Redirigir al usuario a la página de inicio de sesión\n            return this.router.parseUrl('/login');\n        }\n    }\n\n    pprivate validateAccess(user: UserDetails): boolean {\n        // Asegurarse de que user.rolUsuarioByIdUsuario.rolByRolIdRol.rolName no es undefined ni null antes de llamar a includes\n        return !!user.rolUsuarioByIdUsuario.rolByRolIdRol.rolName && user.rolUsuarioByIdUsuario.rolByRolIdRol.rolName.includes('admin'); // Ejemplo: solo los admins pueden acceder\n    }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}